name: Deploy GitHub Pages

on:
  push:
    branches: [ main ]
    paths:
      - 'docs/**'
      - 'README.md'
      - 'index.md'
      - '_config.yml'
      - '_layouts/**'
      - 'assets/**'
  pull_request:
    branches: [ main ]
    paths:
      - 'docs/**'
      - 'README.md'
      - 'index.md'
      - '_config.yml'
      - '_layouts/**'
      - 'assets/**'

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  # Build job
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Setup Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.1'
          bundler-cache: true
          
      - name: Setup Pages
        id: pages
        uses: actions/configure-pages@v4
        
      - name: Install dependencies
        run: |
          gem install bundler
          bundle init
          echo 'gem "jekyll", "~> 4.3"' >> Gemfile
          echo 'gem "minima", "~> 2.5"' >> Gemfile
          echo 'gem "jekyll-feed", "~> 0.12"' >> Gemfile
          echo 'gem "jekyll-sitemap", "~> 1.4"' >> Gemfile
          echo 'gem "jekyll-seo-tag", "~> 2.8"' >> Gemfile
          echo 'gem "jekyll-github-metadata", "~> 2.13"' >> Gemfile
          echo 'gem "jekyll-relative-links", "~> 0.6"' >> Gemfile
          bundle install
          
      - name: Build with Jekyll
        run: |
          bundle exec jekyll build --baseurl "${{ steps.pages.outputs.base_path }}"
        env:
          JEKYLL_ENV: production
          
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3

  # Deployment job
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
        
      - name: Update README with Pages URL
        if: success()
        run: |
          echo "ðŸ“š Documentation deployed successfully!"
          echo "ðŸ”— Live site: ${{ steps.deployment.outputs.page_url }}"
          
  # Validate links job
  validate:
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'pull_request'
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          
      - name: Install link checker
        run: npm install -g markdown-link-check
        
      - name: Check documentation links
        run: |
          find docs -name "*.md" -exec markdown-link-check {} \;
          markdown-link-check README.md
          markdown-link-check index.md
        continue-on-error: true
        
  # SEO and accessibility check
  lighthouse:
    runs-on: ubuntu-latest
    needs: deploy
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          
      - name: Install Lighthouse CI
        run: npm install -g @lhci/cli
        
      - name: Run Lighthouse CI
        run: |
          lhci autorun --upload.target=temporary-public-storage
        env:
          LHCI_GITHUB_APP_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        continue-on-error: true

